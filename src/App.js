import React from "react";
import Button from "@material-ui/core/Button";
import CreateLivePaper from "./CreateLivePaper";
import LivePaper from './LivePaper.template';

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      createLivePaperOpen: false,
    };

    this.handleCreateLivePaperOpen = this.handleCreateLivePaperOpen.bind(this);
    this.handleCreateLivePaperClose = this.handleCreateLivePaperClose.bind(
      this
    );
  }

  handleCreateLivePaperOpen() {
    // this.setState({ createLivePaperOpen: true });
    var nunjucks = require("nunjucks")
    // const Handlebars = require("handlebars");

    function render(data) {
        fetch(LivePaper)
        .then(r => r.text())
        .then(source => {

            var output = nunjucks.renderString(source, data)

            // var template = Handlebars.compile(source);
            // var output = template(data);
            
            // console.log('text decoded:', output);

            const element = document.createElement("a");
            const file = new Blob([output], {type: 'text/html'});
            element.href = URL.createObjectURL(file);
            element.download = "livepaper_demo.html";
            document.body.appendChild(element); // Required for this to work in FireFox
            element.click();
        });
      
    }
    // var data = JSON.parse(fs.readFileSync("./data/strings.json", 'utf8'));
    var data = { paper_title: "Namaste" };
    render(data);

    // console.log(nunjucks.render(
    //     ".njk", {
    //         paper_title: "Namaste"
    //     }
    // ));
  }

  handleCreateLivePaperClose() {
    this.setState({ createLivePaperOpen: false });
  }

  render() {
    var createLivePaper = "";
    if (this.state.createLivePaperOpen) {
      createLivePaper = (
        <CreateLivePaper
          open={this.state.createLivePaperOpen}
          onClose={this.handleCreateLivePaperClose}
        />
      );
    }
    console.log(this.state.createLivePaperOpen);
    return (
      <div className="container" style={{ textAlign: "left" }}>
        <br />
        <div className="box rounded centered">
          <a
            href="../../index.html"
            className="waves-effect waves-light"
            style={{ textAlign: "center", color: "black" }}
          >
            <table>
              <tbody>
                <tr>
                  <td>
                    <img
                      className="hbp-icon-small"
                      src="./imgs/hbp_diamond_120.png"
                      alt="HBP logo"
                    />
                  </td>
                  <td>
                    <span
                      className="title-style subtitle"
                      style={{ paddingLeft: "5px" }}
                    >
                      EBRAINS Live Papers
                    </span>
                  </td>
                </tr>
              </tbody>
            </table>
          </a>
          <h5 className="title-style">Live Paper Builder</h5>
        </div>
        <div
          style={{
            paddingLeft: "5%",
            paddingRight: "5%",
            textAlign: "justify",
          }}
        >
          <strong>Welcome to the EBRAINS live paper builder!</strong>
          <br />
          <br />
          Here you can start building a new live paper linked to your manuscript
          or published article. The live paper builder allows you to build the
          live paper without any web development skills. Various functionalities
          for building a simple to moderately complex live paper is made
          available via this tool. For more advanced features and
          customizations, the users can edit the live Papers generated by this
          tool.
          <br />
          <br />
          Live papers are often not produced in one go, and might require
          revisions over time. Keeping this in mind, we allow users to download
          "live paper projects" during each session. These sessions can be
          uploaded later, to continue from where you had left off. Please note,
          that these project files should not be manually edited as it could
          render them unreadable by the tool.
        </div>
        <br />
        <div
          style={{
            display: "flex",
            justifyContent: "space-around",
            alignItems: "center",
          }}
        >
          <Button
            variant="contained"
            color="primary"
            style={{
              width: "40%",
              backgroundColor: "#FF9800",
              color: "#000000",
              fontWeight: "bold",
            }}
            onClick={this.handleCreateLivePaperOpen}
          >
            Create New Live Paper
          </Button>
          <br />
          <br />
          <Button
            variant="contained"
            color="secondary"
            style={{
              width: "40%",
              backgroundColor: "#01579b",
              fontWeight: "bold",
            }}
          >
            Load Existing Project
          </Button>
        </div>
        <br />
        <br />
        <div className="rainbow-row">
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </div>
        <br />
        <br />
        <div>{createLivePaper}</div>
      </div>
    );
  }
}
export default App;
